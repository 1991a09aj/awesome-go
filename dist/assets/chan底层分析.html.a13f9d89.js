import{_ as t,r as o,o as c,c as i,a as n,b as e,e as s,d as p}from"./app.9d39be69.js";const l="/assets/6EgmtVuvlj2YMxU.b3db1eb5.jpg",u={},r=n("h1",{id:"chan\u73AF\u5F62\u961F\u5217-\u5148\u8FDB\u5148\u51FA",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#chan\u73AF\u5F62\u961F\u5217-\u5148\u8FDB\u5148\u51FA","aria-hidden":"true"},"#"),s(" chan\u73AF\u5F62\u961F\u5217 \u5148\u8FDB\u5148\u51FA")],-1),d=n("p",null,"[toc]",-1),m=s("\u{1F636}\u200D\u{1F32B}\uFE0Fgo\u8BED\u8A00\u5B98\u65B9\u7F16\u7A0B\u6307\u5357\uFF1A"),k={href:"https://golang.org/#",target:"_blank",rel:"noopener noreferrer"},v=s("https://golang.org/#"),h=n("blockquote",null,[n("p",null,"go\u8BED\u8A00\u7684\u5B98\u65B9\u6587\u6863\u5B66\u4E60\u7B14\u8BB0\u5F88\u5168\uFF0C\u63A8\u8350\u53BB\u5B98\u7F51\u5B66\u4E60")],-1),b=s("\u{1F636}\u200D\u{1F32B}\uFE0F\u6211\u7684\u5B66\u4E60\u7B14\u8BB0\uFF1Agithub: "),g={href:"https://github.com/3293172751/golang-rearn",target:"_blank",rel:"noopener noreferrer"},f=s("https://github.com/3293172751/golang-rearn"),_=n("hr",null,null,-1),y=n("p",null,[n("strong",null,"\u533A\u5757\u94FE\u6280\u672F\uFF08\u4E5F\u79F0\u4E4B\u4E3A\u5206\u5E03\u5F0F\u8D26\u672C\u6280\u672F\uFF09"),s("\uFF0C\u662F\u4E00\u79CD\u4E92\u8054\u7F51\u6570\u636E\u5E93\u6280\u672F\uFF0C\u5176\u7279\u70B9\u662F\u53BB\u4E2D\u5FC3\u5316\uFF0C\u516C\u5F00\u900F\u660E\uFF0C\u8BA9\u6BCF\u4E00\u4E2A\u4EBA\u5747\u53EF\u53C2\u4E0E\u7684\u6570\u636E\u5E93\u8BB0\u5F55")],-1),w=s("\u2764\uFE0F\u{1F495}\u{1F495}\u5173\u4E8E\u533A\u5757\u94FE\u6280\u672F\uFF0C\u53EF\u4EE5\u5173\u6CE8\u6211\uFF0C\u5171\u540C\u5B66\u4E60\u66F4\u591A\u7684\u533A\u5757\u94FE\u6280\u672F\u3002\u535A\u5BA2"),x={href:"http://nsddd.top",target:"_blank",rel:"noopener noreferrer"},z=s("http://nsddd.top"),q=p('<h2 id="_1-1-\u73AF\u5F62\u7F13\u51B2\u533A\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_1-1-\u73AF\u5F62\u7F13\u51B2\u533A\u7ED3\u6784" aria-hidden="true">#</a> 1.1 \u73AF\u5F62\u7F13\u51B2\u533A\u7ED3\u6784</h2><p>\u200B \u73AF\u5F62\u7F13\u51B2\u533A\u901A\u5E38\u6709\u4E00\u4E2A\u8BFB\u6307\u9488\u548C\u4E00\u4E2A\u5199\u6307\u9488\u3002\u8BFB\u6307\u9488\u6307\u5411\u73AF\u5F62\u7F13\u51B2\u533A\u4E2D\u53EF\u8BFB\u7684\u6570\u636E\uFF0C\u5199\u6307\u9488\u6307\u5411\u73AF\u5F62\u7F13\u51B2\u533A\u4E2D\u53EF\u5199\u7684\u7F13\u51B2\u533A\u3002\u901A\u8FC7\u79FB\u52A8\u8BFB\u6307\u9488\u548C\u5199\u6307\u9488\u5C31\u53EF\u4EE5\u5B9E\u73B0\u7F13\u51B2\u533A\u7684\u6570\u636E\u8BFB\u53D6\u548C\u5199\u5165\u3002\u5728\u901A\u5E38\u60C5\u51B5\u4E0B\uFF0C\u73AF\u5F62\u7F13\u51B2\u533A\u7684\u8BFB\u7528\u6237\u4EC5\u4EC5\u4F1A\u5F71\u54CD\u8BFB\u6307\u9488\uFF0C\u800C\u5199\u7528\u6237\u4EC5\u4EC5\u4F1A\u5F71\u54CD\u5199\u6307\u9488\u3002\u5982\u679C\u4EC5\u4EC5\u6709\u4E00\u4E2A\u8BFB\u7528\u6237\u548C\u4E00\u4E2A\u5199\u7528\u6237\uFF0C\u90A3\u4E48\u4E0D\u9700\u8981\u6DFB\u52A0\u4E92\u65A5\u4FDD\u62A4\u673A\u5236\u5C31\u53EF\u4EE5\u4FDD\u8BC1\u6570\u636E\u7684\u6B63\u786E\u6027\u3002\u5982\u679C\u6709\u591A\u4E2A\u8BFB\u5199\u7528\u6237\u8BBF\u95EE\u73AF\u5F62\u7F13\u51B2\u533A\uFF0C\u90A3\u4E48\u5FC5\u987B\u6DFB\u52A0\u4E92\u65A5\u4FDD\u62A4\u673A\u5236\u6765\u786E\u4FDD\u591A\u4E2A\u7528\u6237\u4E92\u65A5\u8BBF\u95EE\u73AF\u5F62\u7F13\u51B2\u533A\u3002</p><h2 id="_1-2-\u73AF\u5F62\u7F13\u51B2\u533A\u4E00\u79CD\u8BFB\u5199\u5B9E\u73B0\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#_1-2-\u73AF\u5F62\u7F13\u51B2\u533A\u4E00\u79CD\u8BFB\u5199\u5B9E\u73B0\u673A\u5236" aria-hidden="true">#</a> 1.2 \u73AF\u5F62\u7F13\u51B2\u533A\u4E00\u79CD\u8BFB\u5199\u5B9E\u73B0\u673A\u5236</h2><p>\u4E00\u822C\u7684\uFF0C\u5706\u5F62\u7F13\u51B2\u533A\u9700\u89814\u4E2A\u6307\u9488</p><p>\u5728\u5185\u5B58\u4E2D\u5B9E\u9645\u5F00\u59CB\u4F4D\u7F6E\uFF1B</p><p><strong>\u5728\u5185\u5B58\u4E2D\u5B9E\u9645\u7ED3\u675F\u4F4D\u7F6E\uFF0C\u4E5F\u53EF\u4EE5\u7528\u7F13\u51B2\u533A\u957F\u5EA6\u4EE3\u66FF\uFF1B</strong></p><p><strong>\u5B58\u50A8\u5728\u7F13\u51B2\u533A\u4E2D\u7684\u6709\u6548\u6570\u636E\u7684\u5F00\u59CB\u4F4D\u7F6E\uFF08\u8BFB\u6307\u9488\uFF09\uFF1B</strong></p><p><strong>\u5B58\u50A8\u5728\u7F13\u51B2\u533A\u4E2D\u7684\u6709\u6548\u6570\u636E\u7684\u7ED3\u5C3E\u4F4D\u7F6E\uFF08\u5199\u6307\u9488\uFF09\u3002</strong></p><p>\u7F13\u51B2\u533A\u662F\u6EE1\u3001\u6216\u662F\u7A7A\uFF0C\u90FD\u6709\u53EF\u80FD\u51FA\u73B0\u8BFB\u6307\u9488\u4E0E\u5199\u6307\u9488\u6307\u5411\u540C\u4E00\u4F4D\u7F6E\uFF1A</p><p>\u7F13\u51B2\u533A\u4E2D\u603B\u662F\u6709\u4E00\u4E2A\u5B58\u50A8\u5355\u5143\u4FDD\u6301\u672A\u4F7F\u7528\u72B6\u6001\u3002\u7F13\u51B2\u533A\u6700\u591A\u5B58\u5165\uFF08size-1\uFF09\u4E2A\u6570\u636E\u3002\u5982\u679C\u8BFB\u5199\u6307\u9488\u6307\u5411\u540C\u4E00\u4F4D\u7F6E\uFF0C\u5219\u7F13\u51B2\u533A\u4E3A\u7A7A\u3002\u5982\u679C\u5199\u6307\u9488\u4F4D\u4E8E\u8BFB\u6307\u9488\u7684\u76F8\u90BB\u540E\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u5219\u7F13\u51B2\u533A\u4E3A\u6EE1\u3002</p><p><img src="'+l+`" alt="img"></p><h2 id="_2-chan\u5185\u90E8\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_2-chan\u5185\u90E8\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> 2 chan\u5185\u90E8\u6570\u636E\u7ED3\u6784</h2><h3 id="_2-1-chan\u7684\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_2-1-chan\u7684\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> 2.1 chan\u7684\u6570\u636E\u7ED3\u6784</h3><p><strong>chan\u5B9E\u8D28\u662F\u4E2A\u73AF\u5F62\u7F13\u51B2\u533A\uFF0C\u5916\u52A0\u4E00\u4E2A\u63A5\u53D7\u8005\u534F\u7A0B\u961F\u5217\u548C\u4E00\u4E2A\u53D1\u9001\u8005\u534F\u7A0B\u961F\u5217</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>buf      \uFF1A\u73AF\u5F62\u7F13\u51B2\u533A
sendx \uFF1A\u7528\u4E8E\u8BB0\u5F55buf\u8FD9\u4E2A\u5FAA\u73AF\u94FE\u8868\u4E2D\u7684\u53D1\u9001\u7684index
recvx  \uFF1A\u7528\u4E8E\u8BB0\u5F55buf\u8FD9\u4E2A\u5FAA\u73AF\u94FE\u8868\u4E2D\u63A5\u6536\u7684index
recvq  \uFF1A\u63A5\u53D7\u8005\u534F\u7A0B\u961F\u5217
sendq \uFF1A\u53D1\u9001\u8005\u534F\u7A0B\u961F\u5217
lock    \uFF1A\u4E92\u65A5\u9501
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-\u6709\u7F13\u51B2\u533A\u548C\u65E0\u7F13\u51B2\u533Achan\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#_2-2-\u6709\u7F13\u51B2\u533A\u548C\u65E0\u7F13\u51B2\u533Achan\u7684\u533A\u522B" aria-hidden="true">#</a> 2.2 \u6709\u7F13\u51B2\u533A\u548C\u65E0\u7F13\u51B2\u533Achan\u7684\u533A\u522B</h3><h5 id="_2-2-1-\u65E0\u7F13\u51B2chan\u6570\u636E\u540C\u6B65\u8FC7\u7A0B\u548Csudog\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_2-2-1-\u65E0\u7F13\u51B2chan\u6570\u636E\u540C\u6B65\u8FC7\u7A0B\u548Csudog\u7ED3\u6784" aria-hidden="true">#</a> 2.2.1 \u65E0\u7F13\u51B2chan\u6570\u636E\u540C\u6B65\u8FC7\u7A0B\u548Csudog\u7ED3\u6784</h5><p>\u521B\u5EFA\u4E00\u4E2A\u53D1\u9001\u8005\u5217\u8868\u548C\u63A5\u6536\u8005\u5217\u8868\u90FD\u4E3A\u7A7A\u7684 channel\u3002 \u7B2C\u4E00\u4E2A\u534F\u7A0B\u5411 channel \u53D1\u9001\u53D8\u91CF\u7684\u503C channel \u4ECE\u6C60\u4E2D\u83B7\u53D6\u4E00\u4E2Asudog\u7ED3\u6784\u4F53\u53D8\u91CF\uFF0C\u7528\u4E8E\u8868\u793A\u53D1\u9001\u8005\u3002sudog \u7ED3\u6784\u4F53\u4F1A\u4FDD\u6301\u5BF9\u53D1\u9001\u8005\u6240\u5728\u534F\u7A0B\u7684\u5F15\u7528\uFF0C\u4EE5\u53CA\u53D1\u9001\u53D8\u91CF\u7684\u5F15\u7528\u3002 \u53D1\u9001\u8005\u52A0\u5165sendq\u961F\u5217\u3002 \u53D1\u9001\u8005\u534F\u7A0B\u8FDB\u5165\u7B49\u5F85\u72B6\u6001\u3002 \u7B2C\u4E8C\u4E2A\u534F\u7A0B\u5C06\u4ECE channel \u4E2D\u8BFB\u53D6\u4E00\u4E2A\u6D88\u606F channel \u5C06sendq\u5217\u8868\u4E2D\u7B49\u5F85\u72B6\u6001\u7684\u53D1\u9001\u8005\u51FA\u961F\u5217\u3002 chanel \u4F7F\u7528memmove\u51FD\u6570\u5C06\u53D1\u9001\u8005\u8981\u53D1\u9001\u7684\u503C\u8FDB\u884C\u62F7\u8D1D\uFF0C\u5305\u88C5\u5165sudog\u7ED3\u6784\u4F53\uFF0C\u518D\u4F20\u9012\u7ED9 channel \u63A5\u6536\u8005\u7684\u63A5\u6536\u53D8\u91CF\u3002 \u5728\u7B2C\u4E94\u6B65\u4E2D\u88AB\u6302\u8D77\u7684\u7B2C\u4E00\u4E2A\u534F\u7A0B\u5C06\u6062\u590D\u8FD0\u884C\u5E76\u91CA\u653E\u7B2C\u4E09\u6B65\u4E2D\u83B7\u53D6\u7684sudog\u7ED3\u6784\u4F53\u3002</p><h5 id="_2-2-1-\u6709\u7F13\u51B2chan" tabindex="-1"><a class="header-anchor" href="#_2-2-1-\u6709\u7F13\u51B2chan" aria-hidden="true">#</a> 2.2.1 \u6709\u7F13\u51B2chan</h5><p>\u6709\u7F13\u51B2chan\u5B9E\u8D28\u662F\u4F7F\u7528\u4E86\u5B8C\u6574\u7684\u73AF\u5F62\u7F13\u51B2\u533A\uFF0C\u53EA\u8981\u7F13\u51B2\u533A\u6709\u7A7A\u95F2\uFF0C\u5219\u53D1\u9001\u8005\u65E0\u9700\u8FDB\u5165\u7B49\u5F85\u961F\u5217\uFF0C\u76F4\u63A5\u5C06\u6570\u636E\u653E\u5165\u73AF\u5F62\u7F13\u51B2\u533A\u4E2D\uFF0C\u5982\u679C\u7F13\u51B2\u533A\u6709\u6570\u636E\uFF0C\u63A5\u53D7\u8005\u65E0\u9700\u8FDB\u5165\u7B49\u5F85\u961F\u5217\uFF0C\u76F4\u63A5\u4ECE\u73AF\u5F62\u7F13\u51B2\u533A\u4E2D\u83B7\u53D6\u6570\u636E\u3002</p><h2 id="_3-\u5173\u952E\u6E90\u7801\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#_3-\u5173\u952E\u6E90\u7801\u5206\u6790" aria-hidden="true">#</a> 3 \u5173\u952E\u6E90\u7801\u5206\u6790</h2><h3 id="_3-1-chan\u6570\u636E\u7ED3\u6784\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#_3-1-chan\u6570\u636E\u7ED3\u6784\u6E90\u7801" aria-hidden="true">#</a> 3.1 chan\u6570\u636E\u7ED3\u6784\u6E90\u7801</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> hchan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	qcount   <span class="token builtin">uint</span>           <span class="token comment">// total data in the queue</span>
	dataqsiz <span class="token builtin">uint</span>           <span class="token comment">// size of the circular queue</span>
	buf      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// points to an array of dataqsiz elements</span>
	elemsize <span class="token builtin">uint16</span>
	closed   <span class="token builtin">uint32</span>
	elemtype <span class="token operator">*</span>_type <span class="token comment">// element type</span>
	sendx    <span class="token builtin">uint</span>   <span class="token comment">// send index</span>
	recvx    <span class="token builtin">uint</span>   <span class="token comment">// receive index</span>
	recvq    waitq  <span class="token comment">// list of recv waiters</span>
	sendq    waitq  <span class="token comment">// list of send waiters</span>
<span class="token comment">// lock protects all fields in hchan, as well as several</span>
<span class="token comment">// fields in sudogs blocked on this channel.</span>
<span class="token comment">//</span>
<span class="token comment">// Do not change another G&#39;s status while holding this lock</span>
<span class="token comment">// (in particular, do not ready a G), as this can deadlock</span>
<span class="token comment">// with stack shrinking.</span>
lock mutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-sudog\u6570\u636E\u7ED3\u6784\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#_3-2-sudog\u6570\u636E\u7ED3\u6784\u6E90\u7801" aria-hidden="true">#</a> 3.2 sudog\u6570\u636E\u7ED3\u6784\u6E90\u7801</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// sudog represents a g in a wait list, such as for sending/receiving</span>
<span class="token comment">// on a channel.</span>
<span class="token comment">//</span>
<span class="token comment">// sudog is necessary because the g \u2194 synchronization object relation</span>
<span class="token comment">// is many-to-many. A g can be on many wait lists, so there may be</span>
<span class="token comment">// many sudogs for one g; and many gs may be waiting on the same</span>
<span class="token comment">// synchronization object, so there may be many sudogs for one object.</span>
<span class="token comment">//</span>
<span class="token comment">// sudogs are allocated from a special pool. Use acquireSudog and</span>
<span class="token comment">// releaseSudog to allocate and free them.</span>
<span class="token keyword">type</span> sudog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// The following fields are protected by the hchan.lock of the</span>
	<span class="token comment">// channel this sudog is blocking on. shrinkstack depends on</span>
	<span class="token comment">// this for sudogs involved in channel ops.</span>
g 		<span class="token operator">*</span>g
<span class="token comment">// isSelect indicates g is participating in a select, so</span>
<span class="token comment">// g.selectDone must be CAS&#39;d to win the wake-up race.</span>
isSelect <span class="token builtin">bool</span>
next     <span class="token operator">*</span>sudog
prev     <span class="token operator">*</span>sudog
elem     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// data element (may point to stack)</span>
 
<span class="token comment">// The following fields are never accessed concurrently.</span>
<span class="token comment">// For channels, waitlink is only accessed by g.</span>
<span class="token comment">// For semaphores, all fields (including the ones above)</span>
<span class="token comment">// are only accessed when holding a semaRoot lock.</span>
 
acquiretime <span class="token builtin">int64</span>
releasetime <span class="token builtin">int64</span>
ticket      <span class="token builtin">uint32</span>
parent      <span class="token operator">*</span>sudog <span class="token comment">// semaRoot binary tree</span>
waitlink    <span class="token operator">*</span>sudog <span class="token comment">// g.waiting list or semaRoot</span>
waittail    <span class="token operator">*</span>sudog <span class="token comment">// semaRoot</span>
c           <span class="token operator">*</span>hchan <span class="token comment">// channel</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-chan\u7684\u6784\u9020\u8FC7\u7A0B" tabindex="-1"><a class="header-anchor" href="#_3-3-chan\u7684\u6784\u9020\u8FC7\u7A0B" aria-hidden="true">#</a> 3.3 chan\u7684\u6784\u9020\u8FC7\u7A0B</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makechan</span><span class="token punctuation">(</span>t <span class="token operator">*</span>chantype<span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>hchan <span class="token punctuation">{</span>
	elem <span class="token operator">:=</span> t<span class="token punctuation">.</span>elem
<span class="token comment">// compiler checks this but be safe.</span>
<span class="token keyword">if</span> elem<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token punctuation">{</span>
	<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;makechan: invalid channel element type&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> hchanSize<span class="token operator">%</span>maxAlign <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> elem<span class="token punctuation">.</span>align <span class="token operator">&gt;</span> maxAlign <span class="token punctuation">{</span>
	<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;makechan: bad alignment&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc<span class="token operator">-</span>hchanSize <span class="token operator">||</span> size <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">&quot;makechan: size out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// Hchan does not contain pointers interesting for GC when elements stored in buf do not contain pointers.</span>
<span class="token comment">// buf points into the same allocation, elemtype is persistent.</span>
<span class="token comment">// SudoG&#39;s are referenced from their owning thread so they can&#39;t be collected.</span>
<span class="token comment">// TODO(dvyukov,rlh): Rethink when collector can move allocated objects.</span>
<span class="token keyword">var</span> c <span class="token operator">*</span>hchan
<span class="token keyword">switch</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> mem <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
	<span class="token comment">// Queue or element size is zero.</span>
	c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// Race detector uses this location for synchronization.</span>
	c<span class="token punctuation">.</span>buf <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">raceaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> elem<span class="token punctuation">.</span>ptrdata <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
	<span class="token comment">// Elements do not contain pointers.</span>
	<span class="token comment">// Allocate hchan and buf in one call.</span>
	c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token operator">+</span>mem<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> hchanSize<span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
	<span class="token comment">// Elements contain pointers.</span>
	c <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hchan<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
c<span class="token punctuation">.</span>elemsize <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
c<span class="token punctuation">.</span>elemtype <span class="token operator">=</span> elem
c<span class="token punctuation">.</span>dataqsiz <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
 
<span class="token keyword">if</span> debugChan <span class="token punctuation">{</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;makechan: chan=&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">&quot;; elemsize=&quot;</span><span class="token punctuation">,</span> elem<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token string">&quot;; dataqsiz=&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u770B\u5230\uFF0C\u5982\u679C\u4E0D\u4F20\u5165size\u6216size=0\uFF0C\u5219\u6CA1\u6709\u4E3A\u73AF\u5F62\u7F13\u51B2\u533A\u5206\u914D\u5185\u5B58\uFF0C\u804C\u4F4Dchan\u7ED3\u6784\u5206\u914D\u5185\u5B58</p><h3 id="_3-4-\u65E0\u7F13\u51B2\u6536\u53D1" tabindex="-1"><a class="header-anchor" href="#_3-4-\u65E0\u7F13\u51B2\u6536\u53D1" aria-hidden="true">#</a> 3.4 \u65E0\u7F13\u51B2\u6536\u53D1</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// Sends and receives on unbuffered or empty-buffered channels are the</span>
<span class="token comment">// only operations where one running goroutine writes to the stack of</span>
<span class="token comment">// another running goroutine. The GC assumes that stack writes only</span>
<span class="token comment">// happen when the goroutine is running and are only done by that</span>
<span class="token comment">// goroutine. Using a write barrier is sufficient to make up for</span>
<span class="token comment">// violating that assumption, but the write barrier has to work.</span>
<span class="token comment">// typedmemmove will call bulkBarrierPreWrite, but the target bytes</span>
<span class="token comment">// are not in the heap, so that will not help. We arrange to call</span>
<span class="token comment">// memmove and typeBitsBulkBarrier instead.</span>

<span class="token keyword">func</span> <span class="token function">sendDirect</span><span class="token punctuation">(</span>t <span class="token operator">*</span>_type<span class="token punctuation">,</span> sg <span class="token operator">*</span>sudog<span class="token punctuation">,</span> src unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// src is on our stack, dst is a slot on another stack.</span>
	<span class="token comment">// Once we read sg.elem out of sg, it will no longer</span>
	<span class="token comment">// be updated if the destination&#39;s stack gets copied (shrunk).</span>
	<span class="token comment">// So make sure that no preemption points can happen between read &amp; use.</span>
	dst <span class="token operator">:=</span> sg<span class="token punctuation">.</span>elem
	<span class="token function">typeBitsBulkBarrier</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	<span class="token comment">// No need for cgo write barrier checks because dst is always</span>
	<span class="token comment">// Go memory.</span>
	<span class="token function">memmove</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">,</span> t<span class="token punctuation">.</span>size<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">recvDirect</span><span class="token punctuation">(</span>t <span class="token operator">*</span>_type<span class="token punctuation">,</span> sg <span class="token operator">*</span>sudog<span class="token punctuation">,</span> dst unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// dst is on our stack or the heap, src is on another stack.</span>
	<span class="token comment">// The channel is locked, so src will not move during this</span>
	<span class="token comment">// operation.</span>
	src <span class="token operator">:=</span> sg<span class="token punctuation">.</span>elem
	<span class="token function">typeBitsBulkBarrier</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	<span class="token function">memmove</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">,</span> t<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function S(B,E){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,d,n("p",null,[m,n("a",k,[v,e(a)])]),h,n("p",null,[b,n("a",g,[f,e(a)])]),_,y,n("blockquote",null,[n("p",null,[w,n("a",x,[z,e(a)])])]),q])}const A=t(u,[["render",S],["__file","chan\u5E95\u5C42\u5206\u6790.html.vue"]]);export{A as default};
