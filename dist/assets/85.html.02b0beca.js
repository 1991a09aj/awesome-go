import{_ as o,r as p,o as c,c as u,a as n,b as a,w as i,d as l,e as s}from"./app.74bed754.js";const k={},r=l(`<h1 id="_1-form-\u8868\u5355-\u6570\u636E\u7ED1\u5B9A\u7ED3\u6784\u4F53" tabindex="-1"><a class="header-anchor" href="#_1-form-\u8868\u5355-\u6570\u636E\u7ED1\u5B9A\u7ED3\u6784\u4F53" aria-hidden="true">#</a> 1. form(\u8868\u5355\uFF09\u6570\u636E\u7ED1\u5B9A\u7ED3\u6784\u4F53</h1><p>\u672C\u5B9E\u4F8B\u8BB2\u89E3\u7684\u662Fform\u8868\u5355\u63D0\u4EA4\u7684\u6570\u636E\u7ED1\u5B9A\u7ED3\u6784\u4F53,\u5177\u4F53\u5B9E\u73B0\u65B9\u6CD5\u5982\u4E0B\u4EE3\u7801;</p><p>\u4EE3\u7801\u76EE\u5F55\uFF1A</p><p>1129</p><p>-common</p><p>--common.go //\u662F\u5C01\u88C5\u7684\u4EE3\u7801</p><p>-main.go //\u662F\u6D4B\u8BD5\u4EE3\u7801</p><p>\u4EE3\u7801\u7684\u5C01\u88C5\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// Package  implements functions to decode values of a html form.</span>
<span class="token keyword">package</span> common

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;encoding&quot;</span>
    <span class="token string">&quot;encoding/json&quot;</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;net/url&quot;</span>
    <span class="token string">&quot;reflect&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
    <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> tagName <span class="token operator">=</span> <span class="token string">&quot;kuteng&quot;</span>

<span class="token comment">// pathMap holds the values of a map with its key and values correspondent</span>
<span class="token keyword">type</span> pathMap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ma    reflect<span class="token punctuation">.</span>Value
    key   <span class="token builtin">string</span>
    value reflect<span class="token punctuation">.</span>Value

    path <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// pathMaps holds the values for each key</span>
<span class="token keyword">type</span> pathMaps <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>pathMap

<span class="token comment">// find finds and gets the value by the given key</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m pathMaps<span class="token punctuation">)</span> <span class="token function">find</span><span class="token punctuation">(</span>id reflect<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>pathMap <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
        <span class="token keyword">if</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ma <span class="token operator">==</span> id <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>
            <span class="token keyword">return</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Error <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    err <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Error<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;kuteng: &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Error<span class="token punctuation">)</span> <span class="token function">MarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Cause implements the causer interface from github.com/pkg/errors.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Error<span class="token punctuation">)</span> <span class="token function">Cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span>err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">*</span>Error <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>Error<span class="token punctuation">{</span>err<span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token comment">// DecodeCustomTypeFunc is a function that indicate how should to decode a custom type</span>
<span class="token keyword">type</span> DecodeCustomTypeFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// DecodeCustomTypeField is a function registered for a specific field of the struct passed to the Decoder</span>
<span class="token keyword">type</span> DecodeCustomTypeField <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    field reflect<span class="token punctuation">.</span>Value
    fun   DecodeCustomTypeFunc
<span class="token punctuation">}</span>

<span class="token comment">// DecodeCustomType fields for custom types</span>
<span class="token keyword">type</span> DecodeCustomType <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    fun    DecodeCustomTypeFunc
    fields <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>DecodeCustomTypeField
<span class="token punctuation">}</span>

<span class="token comment">// Decoder the main to decode the values</span>
<span class="token keyword">type</span> Decoder <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    main       reflect<span class="token punctuation">.</span>Value
    formValues url<span class="token punctuation">.</span>Values
    opts       <span class="token operator">*</span>DecoderOptions

    curr   reflect<span class="token punctuation">.</span>Value
    values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

    path    <span class="token builtin">string</span>
    field   <span class="token builtin">string</span>
    bracket <span class="token builtin">string</span>
    <span class="token comment">//isKey   bool</span>

    maps pathMaps

    customTypes <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span><span class="token operator">*</span>DecodeCustomType
<span class="token punctuation">}</span>

<span class="token comment">// DecoderOptions options for decoding the values</span>
<span class="token keyword">type</span> DecoderOptions <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// TagName indicates the tag name for decoding a value by the tag</span>
    TagName <span class="token builtin">string</span>
    <span class="token comment">// PrefUnmarshalText indicates if should to give preference to UnmarshalText over custom type registered</span>
    PrefUnmarshalText <span class="token builtin">bool</span>
    <span class="token comment">// IgnoreUnknownKeys controls the behaviour when the decoder encounters unknown keys in the map. If i is true and an unknown field is encountered, it is ignored. This is similar to how unknown keys are handled by encoding/json. If i is false then Decode will return an error. Note that any valid keys will still be decoded in to the target struct.</span>
    IgnoreUnknownKeys <span class="token builtin">bool</span>
<span class="token punctuation">}</span>

<span class="token comment">// RegisterCustomType It is the method responsible for register functions for decoding custom types</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">RegisterCustomType</span><span class="token punctuation">(</span>fn DecodeCustomTypeFunc<span class="token punctuation">,</span> types <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fields <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span>Decoder <span class="token punctuation">{</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>customTypes <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        dec<span class="token punctuation">.</span>customTypes <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span><span class="token operator">*</span>DecodeCustomType<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    lenFields <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> types <span class="token punctuation">{</span>
        typ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> dec<span class="token punctuation">.</span>customTypes<span class="token punctuation">[</span>typ<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>customTypes<span class="token punctuation">[</span>typ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>DecodeCustomType<span class="token punctuation">{</span>fun<span class="token punctuation">:</span> fn<span class="token punctuation">,</span> fields<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>DecodeCustomTypeField<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> lenFields<span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> lenFields <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> fields <span class="token punctuation">{</span>
                val <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                field <span class="token operator">:=</span> <span class="token operator">&amp;</span>DecodeCustomTypeField<span class="token punctuation">{</span>field<span class="token punctuation">:</span> val<span class="token punctuation">,</span> fun<span class="token punctuation">:</span> fn<span class="token punctuation">}</span>
                dec<span class="token punctuation">.</span>customTypes<span class="token punctuation">[</span>typ<span class="token punctuation">]</span><span class="token punctuation">.</span>fields <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>customTypes<span class="token punctuation">[</span>typ<span class="token punctuation">]</span><span class="token punctuation">.</span>fields<span class="token punctuation">,</span> field<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dec
<span class="token punctuation">}</span>

<span class="token comment">// NewDecoder creates a new instance of Decoder</span>
<span class="token keyword">func</span> <span class="token function">NewDecoder</span><span class="token punctuation">(</span>opts <span class="token operator">*</span>DecoderOptions<span class="token punctuation">)</span> <span class="token operator">*</span>Decoder <span class="token punctuation">{</span>
    dec <span class="token operator">:=</span> <span class="token operator">&amp;</span>Decoder<span class="token punctuation">{</span>opts<span class="token punctuation">:</span> opts<span class="token punctuation">}</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>opts <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        dec<span class="token punctuation">.</span>opts <span class="token operator">=</span> <span class="token operator">&amp;</span>DecoderOptions<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>TagName <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
        dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>TagName <span class="token operator">=</span> tagName
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dec
<span class="token punctuation">}</span>

<span class="token comment">// Decode decodes the url.Values into a element that must be a pointer to a type provided by argument</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec Decoder<span class="token punctuation">)</span> <span class="token function">Decode</span><span class="token punctuation">(</span>vs url<span class="token punctuation">.</span>Values<span class="token punctuation">,</span> dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    main <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span>
    <span class="token keyword">if</span> main<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the value passed for decode is not a pointer but a %v&quot;</span><span class="token punctuation">,</span> main<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    dec<span class="token punctuation">.</span>main <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    dec<span class="token punctuation">.</span>formValues <span class="token operator">=</span> vs
    <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Decode decodes the url.Values into a element that must be a pointer to a type provided by argument</span>
<span class="token keyword">func</span> <span class="token function">Decode</span><span class="token punctuation">(</span>vs url<span class="token punctuation">.</span>Values<span class="token punctuation">,</span> dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    main <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span>
    <span class="token keyword">if</span> main<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the value passed for decode is not a pointer but a %v&quot;</span><span class="token punctuation">,</span> main<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    dec <span class="token operator">:=</span> <span class="token operator">&amp;</span>Decoder<span class="token punctuation">{</span>
        main<span class="token punctuation">:</span>       main<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        formValues<span class="token punctuation">:</span> vs<span class="token punctuation">,</span>
        opts<span class="token punctuation">:</span> <span class="token operator">&amp;</span>DecoderOptions<span class="token punctuation">{</span>
            TagName<span class="token punctuation">:</span> tagName<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// init initializes the decoding</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec Decoder<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// iterate over the form&#39;s values and decode it</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> dec<span class="token punctuation">.</span>formValues <span class="token punctuation">{</span>
        dec<span class="token punctuation">.</span>path <span class="token operator">=</span> k
        dec<span class="token punctuation">.</span>values <span class="token operator">=</span> v
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>main
        <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">analyzePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Struct <span class="token operator">&amp;&amp;</span> dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>IgnoreUnknownKeys <span class="token punctuation">{</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// set values of maps</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> dec<span class="token punctuation">.</span>maps <span class="token punctuation">{</span>
        key <span class="token operator">:=</span> v<span class="token punctuation">.</span>ma<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        ptr <span class="token operator">:=</span> <span class="token boolean">false</span>
        <span class="token comment">// check if the key implements the UnmarshalText interface</span>
        <span class="token keyword">var</span> val reflect<span class="token punctuation">.</span>Value
        <span class="token keyword">if</span> key<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
            ptr <span class="token operator">=</span> <span class="token boolean">true</span>
            val <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            val <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// decode key</span>
        dec<span class="token punctuation">.</span>path <span class="token operator">=</span> v<span class="token punctuation">.</span>path
        dec<span class="token punctuation">.</span>field <span class="token operator">=</span> v<span class="token punctuation">.</span>path
        dec<span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>key<span class="token punctuation">}</span>
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> val
        <span class="token comment">//dec.isKey = true</span>
        <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
        <span class="token comment">// check if the key is a pointer or not. And if it is, then get its address</span>
        <span class="token keyword">if</span> ptr <span class="token operator">&amp;&amp;</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// set key with its value</span>
        v<span class="token punctuation">.</span>ma<span class="token punctuation">.</span><span class="token function">SetMapIndex</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">,</span> v<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// analyzePath analyzes the current path to walk through it</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">analyzePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inBracket <span class="token operator">:=</span> <span class="token boolean">false</span>
    bracketClosed <span class="token operator">:=</span> <span class="token boolean">false</span>
    lastPos <span class="token operator">:=</span> <span class="token number">0</span>
    endPos <span class="token operator">:=</span> <span class="token number">0</span>

    <span class="token comment">// parse path</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> char <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span> <span class="token operator">&amp;&amp;</span> inBracket <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>
            <span class="token comment">// found an opening bracket</span>
            bracketClosed <span class="token operator">=</span> <span class="token boolean">false</span>
            inBracket <span class="token operator">=</span> <span class="token boolean">true</span>
            dec<span class="token punctuation">.</span>field <span class="token operator">=</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">[</span>lastPos<span class="token punctuation">:</span>i<span class="token punctuation">]</span>
            lastPos <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> inBracket <span class="token punctuation">{</span>
            <span class="token comment">// it is inside of bracket, so get its value</span>
            <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token char">&#39;]&#39;</span> <span class="token punctuation">{</span>
                <span class="token comment">// found an closing bracket, so it will be recently close, so put as true the bracketClosed</span>
                <span class="token comment">// and put as false inBracket and pass the value of bracket to dec.key</span>
                inBracket <span class="token operator">=</span> <span class="token boolean">false</span>
                bracketClosed <span class="token operator">=</span> <span class="token boolean">true</span>
                dec<span class="token punctuation">.</span>bracket <span class="token operator">=</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">[</span>lastPos<span class="token punctuation">:</span>endPos<span class="token punctuation">]</span>
                lastPos <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token keyword">if</span> err <span class="token operator">=</span> dec<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// still inside the bracket, so to save the end position</span>
                endPos <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>inBracket <span class="token punctuation">{</span>
            <span class="token comment">// not found any bracket, so try found a field</span>
            <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span> <span class="token punctuation">{</span>
                <span class="token comment">// found a field, we need to know if the field is next of a closing bracket,</span>
                <span class="token comment">// for example: [0].Field</span>
                <span class="token keyword">if</span> bracketClosed <span class="token punctuation">{</span>
                    bracketClosed <span class="token operator">=</span> <span class="token boolean">false</span>
                    lastPos <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
                    <span class="token keyword">continue</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// found a field, but is not next of a closing bracket, for example: Field1.Field2</span>
                dec<span class="token punctuation">.</span>field <span class="token operator">=</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">[</span>lastPos<span class="token punctuation">:</span>i<span class="token punctuation">]</span>
                <span class="token comment">//dec.field = tmp[:i]</span>
                lastPos <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token keyword">if</span> err <span class="token operator">=</span> dec<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// last field of path</span>
    dec<span class="token punctuation">.</span>field <span class="token operator">=</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">[</span>lastPos<span class="token punctuation">:</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// walk traverses the current path until to the last field</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// check if there is field, if is so, then it should be struct or map (access by .)</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>field <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
        <span class="token comment">// check if is a struct or map</span>
        <span class="token keyword">switch</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">findStructField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> err
            <span class="token punctuation">}</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>
            dec<span class="token punctuation">.</span><span class="token function">traverseInMap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        dec<span class="token punctuation">.</span>field <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// check if is a interface and it is not nil. This mean that the interface</span>
    <span class="token comment">// has a struct, map or slice as value</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Interface <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// check if it is a pointer</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
        <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// check if there is access to slice/array or map (access by [])</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>bracket <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">:</span>
            index<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>bracket<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the index of array is not a number in the field \\&quot;%v\\&quot; of path \\&quot;%v\\&quot;&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">:</span>
            index<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>bracket<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the index of slice is not a number in the field \\&quot;%v\\&quot; of path \\&quot;%v\\&quot;&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> index <span class="token punctuation">{</span>
                dec<span class="token punctuation">.</span><span class="token function">expandSlice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>
            dec<span class="token punctuation">.</span><span class="token function">traverseInMap</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot; has a index for array but it is a %v&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        dec<span class="token punctuation">.</span>bracket <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// walkMap puts in d.curr the map concrete for decode the current value</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">traverseInMap</span><span class="token punctuation">(</span>byField <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    makeAndAppend <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> dec<span class="token punctuation">.</span>maps <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>maps <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span>pathMaps<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        m <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> byField <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>maps <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>maps<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pathMap<span class="token punctuation">{</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> m<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>maps <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>maps<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pathMap<span class="token punctuation">{</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>bracket<span class="token punctuation">,</span> m<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> m
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// map is nil</span>
        dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">MakeMap</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">makeAndAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// map is not nil, so try find value by the key</span>
        <span class="token keyword">var</span> a <span class="token operator">*</span>pathMap
        <span class="token keyword">if</span> byField <span class="token punctuation">{</span>
            a <span class="token operator">=</span> dec<span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            a <span class="token operator">=</span> dec<span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>bracket<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token comment">// the key not exists</span>
            <span class="token function">makeAndAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> a<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// end finds the last field for decode its value correspondent</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
        <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">findStructField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>
        <span class="token comment">// leave backward compatibility for access to maps by .</span>
        dec<span class="token punctuation">.</span><span class="token function">traverseInMap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// decode sets the value in the field</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// check if has UnmarshalText method or a custom function to decode it</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>PrefUnmarshalText <span class="token punctuation">{</span>
        <span class="token keyword">if</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">isUnmarshalText</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">isCustomType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">isCustomType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">isUnmarshalText</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">switch</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">:</span>
        <span class="token keyword">if</span> dec<span class="token punctuation">.</span>bracket <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
            <span class="token comment">// not has index, so to decode all values in the slice</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">setValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> err
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// has index, so to decode value by index indicated</span>
            index<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>bracket<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the index of array is not a number in the field \\&quot;%v\\&quot; of path \\&quot;%v\\&quot;&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
            <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">:</span>
        <span class="token keyword">if</span> dec<span class="token punctuation">.</span>bracket <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
            <span class="token comment">// not has index, so to decode all values in the slice</span>
            <span class="token comment">// only for slices</span>
            dec<span class="token punctuation">.</span><span class="token function">expandSlice</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">setValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> err
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// has index, so to decode value by index indicated</span>
            index<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>bracket<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the index of slice is not a number in the field \\&quot;%v\\&quot; of path \\&quot;%v\\&quot;&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// only for slices</span>
            <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> index <span class="token punctuation">{</span>
                dec<span class="token punctuation">.</span><span class="token function">expandSlice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
            <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>
        dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int16<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int64<span class="token punctuation">:</span>
        <span class="token keyword">if</span> num<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the value of field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot; should be a valid signed integer number&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Uint<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint16<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint64<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uintptr<span class="token punctuation">:</span>
        <span class="token keyword">if</span> num<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseUint</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the value of field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot; should be a valid unsigned integer number&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">SetUint</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Float32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Float64<span class="token punctuation">:</span>
        <span class="token keyword">if</span> num<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the value of field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot; should be a valid float number&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Bool<span class="token punctuation">:</span>
        <span class="token keyword">switch</span> dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;on&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;checked&quot;</span><span class="token punctuation">:</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Interface<span class="token punctuation">:</span>
        dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Ptr<span class="token punctuation">:</span>
        n <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
        <span class="token keyword">switch</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">:</span>
            <span class="token keyword">var</span> t time<span class="token punctuation">.</span>Time
            <span class="token comment">// if the value is empty then no to try to parse it and leave &quot;t&quot; as a zero value to set it in the field</span>
            <span class="token keyword">if</span> dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> err <span class="token builtin">error</span>
                t<span class="token punctuation">,</span> err <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;2006-01-02&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the value of field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot; is not a valid datetime&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> url<span class="token punctuation">.</span>URL<span class="token punctuation">:</span>
            u<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the value of field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot; is not a valid url&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">*</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>IgnoreUnknownKeys <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">nil</span>
            <span class="token punctuation">}</span>
            num <span class="token operator">:=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
                field <span class="token operator">:=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                tag <span class="token operator">:=</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>TagName<span class="token punctuation">)</span>
                <span class="token keyword">if</span> tag <span class="token operator">==</span> <span class="token string">&quot;-&quot;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// skip this field</span>
                    <span class="token keyword">return</span> <span class="token boolean">nil</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;not supported type for field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot;. Maybe you should to include it the UnmarshalText interface or register it using custom type?&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>IgnoreUnknownKeys <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;not supported type for field \\&quot;%v\\&quot; in path \\&quot;%v\\&quot;&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// findStructField finds a field by its name, if it is not found,</span>
<span class="token comment">// then retry the search examining the tag &quot;formam&quot; of every field of struct</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">findStructField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> anon reflect<span class="token punctuation">.</span>Value

    num <span class="token operator">:=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        field <span class="token operator">:=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

        <span class="token keyword">if</span> field<span class="token punctuation">.</span>Name <span class="token operator">==</span> dec<span class="token punctuation">.</span>field <span class="token punctuation">{</span>
            tag <span class="token operator">:=</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>TagName<span class="token punctuation">)</span>
            <span class="token keyword">if</span> tag <span class="token operator">==</span> <span class="token string">&quot;-&quot;</span> <span class="token punctuation">{</span>
                <span class="token comment">// skip this field</span>
                <span class="token keyword">return</span> <span class="token boolean">nil</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// check if the field&#39;s name is equal</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> field<span class="token punctuation">.</span>Anonymous <span class="token punctuation">{</span>
            <span class="token comment">// if the field is a anonymous struct, then iterate over its fields</span>
            tmp <span class="token operator">:=</span> dec<span class="token punctuation">.</span>curr
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">FieldByIndex</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
            <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>
                <span class="token keyword">if</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">findStructField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> tmp
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// field in anonymous struct is found,</span>
            <span class="token comment">// but first it should found the field in the rest of struct</span>
            <span class="token comment">// (a field with same name in the current struct should have preference over anonymous struct)</span>
            anon <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> tmp
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> dec<span class="token punctuation">.</span>field <span class="token operator">==</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>TagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// is not found yet, then retry by its tag name &quot;formam&quot;</span>
            dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> anon<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> anon
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>IgnoreUnknownKeys <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">newError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;not found the field \\&quot;%v\\&quot; in the path \\&quot;%v\\&quot;&quot;</span><span class="token punctuation">,</span> dec<span class="token punctuation">.</span>field<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// expandSlice expands the length and capacity of the current slice</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">expandSlice</span><span class="token punctuation">(</span>length <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">MakeSlice</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    reflect<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> dec<span class="token punctuation">.</span>curr<span class="token punctuation">)</span>
    dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// setValues set the values in current slice/array</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">setValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    tmp <span class="token operator">:=</span> dec<span class="token punctuation">.</span>curr <span class="token comment">// hold current field</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> dec<span class="token punctuation">.</span>values <span class="token punctuation">{</span>
        dec<span class="token punctuation">.</span>curr <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v
        <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// isCustomType checks if the field&#39;s type to decode has a custom type registered</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">isCustomType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> dec<span class="token punctuation">.</span>customTypes <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dec<span class="token punctuation">.</span>customTypes<span class="token punctuation">[</span>dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>fields<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span>fields <span class="token punctuation">{</span>
                <span class="token comment">// check if the current field is registered</span>
                <span class="token comment">// in the fields of the custom type</span>
                <span class="token keyword">if</span> v<span class="token punctuation">.</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>field<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> dec<span class="token punctuation">.</span>curr <span class="token punctuation">{</span>
                    va<span class="token punctuation">,</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">)</span>
                    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> err
                    <span class="token punctuation">}</span>
                    dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// check if the default function exists for fields not specific</span>
        <span class="token keyword">if</span> v<span class="token punctuation">.</span>fun <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            va<span class="token punctuation">,</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> err
            <span class="token punctuation">}</span>
            dec<span class="token punctuation">.</span>curr<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
    typeTime    <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    typeTimePtr <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token comment">// isUnmarshalText returns a boolean and error. The boolean is true if the</span>
<span class="token comment">// field&#39;s type implements TextUnmarshaler, and false if not.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>dec <span class="token operator">*</span>Decoder<span class="token punctuation">)</span> <span class="token function">isUnmarshalText</span><span class="token punctuation">(</span>v reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// check if implements the interface</span>
    m<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>encoding<span class="token punctuation">.</span>TextUnmarshaler<span class="token punctuation">)</span>
    addr <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>addr <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> addr <span class="token punctuation">{</span>
        <span class="token keyword">return</span> dec<span class="token punctuation">.</span><span class="token function">isUnmarshalText</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// skip if the type is time.Time</span>
    n <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">ConvertibleTo</span><span class="token punctuation">(</span>typeTime<span class="token punctuation">)</span> <span class="token operator">||</span> n<span class="token punctuation">.</span><span class="token function">ConvertibleTo</span><span class="token punctuation">(</span>typeTimePtr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// return result</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">UnmarshalText</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>dec<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE3\u7801\u7684\u6D4B\u8BD5\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;encoding/json&quot;</span>
    <span class="token string">&quot;fmt&quot;</span>

    <span class="token string">&quot;github.com/student/1129/common&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">//Product Product\u5B9A\u4E49\u4E00\u4E2A\u7ED3\u6784\u4F53</span>
<span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ID           <span class="token builtin">int64</span>  <span class="token string">\`json:&quot;id&quot; sql:&quot;id&quot; kuteng:&quot;id&quot;\`</span>
    ProductClass <span class="token builtin">string</span> <span class="token string">\`json:&quot;ProductClass&quot; sql:&quot;ProductClass&quot; kuteng:&quot;ProductClass&quot;\`</span>
    ProductName  <span class="token builtin">string</span> <span class="token string">\`json:&quot;ProductName&quot; sql:&quot;productName&quot; kuteng:&quot;productName&quot;\`</span>
    ProductNum   <span class="token builtin">int64</span>  <span class="token string">\`json:&quot;ProductNum&quot; sql:&quot;productNum&quot; kuteng:&quot;productNum&quot;\`</span>
    ProductImage <span class="token builtin">string</span> <span class="token string">\`json:&quot;ProductImage&quot; sql:&quot;productImage&quot; kuteng:&quot;productImage&quot;\`</span>
    ProductURL   <span class="token builtin">string</span> <span class="token string">\`json:&quot;ProductUrl&quot; sql:&quot;productUrl&quot;  kuteng:&quot;productUrl&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    product <span class="token operator">:=</span><span class="token operator">&amp;</span>Product<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">//\u8FD9\u5757\u662F\u8868\u5355\u63D0\u4EA4\u7684\u6570\u636E</span>
    p<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    dec <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>common<span class="token punctuation">.</span>DecoderOptions<span class="token punctuation">{</span>TagName<span class="token punctuation">:</span><span class="token string">&quot;kuteng&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err<span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Form<span class="token punctuation">,</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">!=</span><span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;\u7ED1\u5B9A\u5931\u8D25&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="end-\u94FE\u63A5" tabindex="-1"><a class="header-anchor" href="#end-\u94FE\u63A5" aria-hidden="true">#</a> END \u94FE\u63A5</h2><ul><li><div><a href="84.md" style="float:left;">\u2B06\uFE0F\u4E0A\u4E00\u8282\u{1F517}</a><a href="86.md" style="float:right;">\u2B07\uFE0F\u4E0B\u4E00\u8282\u{1F517}</a></div></li></ul>`,13),d=s("\u24C2\uFE0F\u56DE\u5230\u9996\u9875\u{1F3E0}"),v={href:"https://nsddd.top/archives/contributors",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"\u{1FAF5}\u53C2\u4E0E\u8D21\u732E\u{1F49E}\u2764\uFE0F\u200D\u{1F525}\u{1F496}",-1),b=s(")"),f=s("\u2734\uFE0F\u7248\u6743\u58F0\u660E \xA9 :\u672C\u4E66\u6240\u6709\u5185\u5BB9\u9075\u5FAA"),y={href:"http://zh.wikipedia.org/wiki/Wikipedia:CC-by-sa-3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"},w=s("CC-BY-SA 3.0\u534F\u8BAE\uFF08\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB\uFF09\xA9");function h(q,g){const e=p("RouterLink"),t=p("ExternalLinkIcon");return c(),u("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[a(e,{to:"/Gomd_super/"},{default:i(()=>[d]),_:1})])]),n("li",null,[n("p",null,[n("a",v,[m,a(t)]),b])]),n("li",null,[n("p",null,[f,n("a",y,[w,a(t)])])])])])}const x=o(k,[["render",h],["__file","85.html.vue"]]);export{x as default};
