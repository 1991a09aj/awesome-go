/*
 * @Description:第一个设计模式
 * @Author: xiongxinwei 3293172751nss@gmail.com
 * @Date: 2022-10-26 19:44:38
 * @LastEditTime: 2022-10-26 19:44:49
 * @FilePath: \code\设计模式\1.go
 * @Github_Address: https://github.com/3293172751/cs-awesome-Block_Chain
 * Copyright (c) 2022 by xiongxinwei 3293172751nss@gmail.com, All Rights Reserved. @blog: http://nsddd.top
 */
package main
/* 
Go语言中的设计模式：
1. **单一职责原则**：一个类只负责一项职责，或者说一个类只有一个引起它变化的原因。
2. **开放封闭原则**：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
3. **里氏替换原则**：所有引用基类的地方必须能透明地使用其子类的对象。
4. **依赖倒置原则**：抽象不应该依赖于细节，细节应该依赖于抽象。
5. **接口隔离原则**：使用多个专门的接口，而不使用单一的总接口。
6. **合成复用原则**：尽量使用对象组合，而不是继承来达到复用的目的。
7. **迪米特法则**：一个软件实体应当尽可能少地与其他实体发生相互作用。
8. **最少知识原则**：一个软件实体应当尽可能少地与其他实体发生相互作用。
9. **单例模式**：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
10. **工厂方法模式**：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。
11. **抽象工厂模式**：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
12. **建造者模式**：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
13. **原型模式**：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
14. **适配器模式**：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
15. **桥接模式**：将抽象部分与它的实现部分分离，使它们都可以独立地变化。
16. **装饰模式**：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。
17. **外观模式**：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
18. **享元模式**：运用共享技术有效地支持大量细粒度的对象。
19. **代理模式**：为其他对象提供一种代理以控制对这个对象的访问。
20. **组合模式**：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
21. **模板方法模式**：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
22. **策略模式**：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。
23. **命令模式**：将一个请求封装成一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。
24. **职责链模式**：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
25. **迭代器模式**：提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。
26. **观察者模式**：定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
27. **中介者模式**：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
28. **备忘录模式**：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。
29. **解释器模式**：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
30. **状态模式**：允许一个对象在其内部状态改变时改变它的行为能力。
31. **访问者模式**：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
32. **享元模式**：运用共享技术有效地支持大量细粒度的对象。
33. **代理模式**：为其他对象提供一种代理以控制对这个对象的访问。
34. **适配器模式**：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
35. **装饰模式**：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。
36. **桥接模式**：将抽象部分与它的实现部分分离，使它们都可以独立地变化。
37. **组合模式**：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
38. **外观模式**：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
39. **策略模式**：定义一系列算法，把他们一个个封装起来，并且使他们可以相互替换。
40. **模板方法模式**：定义一个操作中算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
41. **工厂方法模式**：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法使一个类的实例化延迟到其子类。
42. **抽象工厂模式**：提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体类。
43. **单例模式**：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
44. **建造者模式**：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
45. **原型模式**：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
46. **适配器


*/
import (
	"container/list"
	"fmt"
)

func main() {
	fmt.Println("hello world")
	copyList()
}

func copyList() {
	list1 := list.New()
	printList2("刚声明的list1", list1)

	fmt.Println("下面都是list1的操作")
	list1.PushBack(1) //pushback表示在链表的尾部添加元素
	//赋值
	list1.PushBack(1)
	list1.PushBack(2)
	list1.PushBack(3)
	list1.PushBack(4)
	list1.PushBack("a")
	list1.PushBack("bcd")

	printList2("赋值后的list1", list1)

	//顺序遍历
	traverseList2("顺序遍历", list1)
	//反向遍历
	traverseListReverse2("反向遍历", list1)

	fmt.Println("下面是list2,拷贝list1")

	//将list1复制到list2
	list2 := list1
	list2.PushBack("list2")
	printList2("复制后的list2", list2)

	//顺序遍历list2
	traverseList2("遍历list2", list2)

}

func printList2(info string, list1 *list.List) {
	fmt.Println("list1 len:", list1.Len())
	fmt.Println("list1 front:", list1.Front())
}

// 顺序遍历
func traverseList2(info string, list1 *list.List) {
	fmt.Println(info)
	for e := list1.Front(); e != nil; e = e.Next() {
		fmt.Println(e.Value)
	}
}

// 反向遍历
func traverseListReverse2(info string, list1 *list.List) {
	fmt.Println(info)
	for e := list1.Back(); e != nil; e = e.Prev() {
		fmt.Println(e.Value)
	}
}

// Path: 设6. **迪米特法则**：一个软件实体应当尽可能少地与其他实体发生相互作用。
7. **合成复用原则**：尽量使用合成/聚合的方式，而不是使用继承。

*/
import (
